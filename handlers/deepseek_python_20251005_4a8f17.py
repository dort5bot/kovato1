# handlers/pdf_handler.py
"""
PDF ƒ∞≈üleme Handler'ƒ±
/pdf komutu - PDF dosyalarƒ±nƒ± gruplara g√∂re i≈üler ve mailleri g√∂nderir
"""
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Dict, List, Set
import tempfile
import zipfile
from pathlib import Path

from config import config
from utils.group_manager import group_manager
from utils.mailer import send_email_with_attachment
from utils.logger import logger

router = Router()

class PdfProcessingStates(StatesGroup):
    waiting_for_pdfs = State()

@router.message(Command("pdf"))
async def cmd_pdf(message: Message, state: FSMContext):
    """PDF i≈üleme komutu"""
    await state.set_state(PdfProcessingStates.waiting_for_pdfs)
    await message.answer(
        "üìÑ **PDF ƒ∞≈ûLEME MODU**\n\n"
        "L√ºtfen i≈ülemek istediƒüiniz PDF dosyalarƒ±nƒ± g√∂nderin.\n\n"
        "üìã **ƒ∞≈ülem Adƒ±mlarƒ±:**\n"
        "1. PDF dosya isimleri ≈üehir adlarƒ±yla e≈üle≈ütirilir\n"
        "2. Her grup i√ßin ilgili PDF'ler birle≈ütirilir\n"
        "3. Gruplarƒ±n email listelerine g√∂nderilir\n\n"
        "√ñrnek: 'manisa.pdf', 'izmir.pdf' dosyalarƒ±\n"
        "‚Üí Manisa ve ƒ∞zmir ≈üehirleriyle e≈üle≈üen gruplara g√∂nderilir"
    )

@router.message(PdfProcessingStates.waiting_for_pdfs, F.document)
async def handle_pdf_upload(message: Message, state: FSMContext):
    """PDF dosyalarƒ±nƒ± i≈üler"""
    try:
        if not message.document.file_name.endswith('.pdf'):
            await message.answer("‚ùå L√ºtfen PDF dosyasƒ± g√∂nderin.")
            return
        
        # Mevcut state'deki dosyalarƒ± al veya yeni liste olu≈ütur
        current_data = await state.get_data()
        pdf_files = current_data.get('pdf_files', [])
        
        # Dosyayƒ± indir
        file_id = message.document.file_id
        file_name = message.document.file_name
        
        bot = message.bot
        file = await bot.get_file(file_id)
        file_path = config.INPUT_DIR / file_name
        
        await bot.download_file(file.file_path, file_path)
        
        # Dosya bilgisini kaydet
        pdf_files.append({
            'path': file_path,
            'filename': file_name,
            'city_name': Path(file_name).stem.lower()  # Dosya adƒ±ndan ≈üehir adƒ±nƒ± √ßƒ±kar
        })
        
        await state.update_data(pdf_files=pdf_files)
        
        await message.answer(
            f"‚úÖ PDF eklendi: {file_name}\n"
            f"üìÅ Toplam PDF: {len(pdf_files)}\n\n"
            "Ba≈üka PDF g√∂ndermek i√ßin bekliyorum...\n"
            "ƒ∞≈ülemi ba≈ülatmak i√ßin '/tamam' yazƒ±n."
        )
        
    except Exception as e:
        logger.error(f"PDF y√ºkleme hatasƒ±: {e}")
        await message.answer("‚ùå PDF i≈ülenirken hata olu≈ütu.")

@router.message(PdfProcessingStates.waiting_for_pdfs, F.text == "/tamam")
async def handle_process_pdfs(message: Message, state: FSMContext):
    """PDF i≈ülemini ba≈ülat"""
    try:
        data = await state.get_data()
        pdf_files = data.get('pdf_files', [])
        
        if not pdf_files:
            await message.answer("‚ùå ƒ∞≈ülenecek PDF dosyasƒ± yok.")
            await state.clear()
            return
        
        await message.answer("‚è≥ PDF'ler gruplara ayrƒ±lƒ±yor ve mailler hazƒ±rlanƒ±yor...")
        
        # PDF'leri gruplara g√∂re i≈üle
        result = await process_pdfs_to_groups(pdf_files, message.from_user.id)
        
        if result["success"]:
            # Rapor olu≈ütur
            report = generate_pdf_report(result)
            await message.answer(report)
        else:
            await message.answer(f"‚ùå ƒ∞≈ülem ba≈üarƒ±sƒ±z: {result.get('error', 'Bilinmeyen hata')}")
        
    except Exception as e:
        logger.error(f"PDF i≈üleme hatasƒ±: {e}")
        await message.answer("‚ùå PDF i≈üleme sƒ±rasƒ±nda hata olu≈ütu.")
    finally:
        await state.clear()

@router.message(PdfProcessingStates.waiting_for_pdfs)
async def handle_wrong_input(message: Message):
    """Yanlƒ±≈ü giri≈ü"""
    await message.answer(
        "‚ùå L√ºtfen PDF dosyasƒ± g√∂nderin veya i≈ülemi ba≈ülatmak i√ßin '/tamam' yazƒ±n.\n"
        "ƒ∞ptal etmek i√ßin '/iptal' komutunu kullanƒ±n."
    )

async def process_pdfs_to_groups(pdf_files: List[Dict], user_id: int) -> Dict:
    """PDF'leri gruplara ayƒ±rƒ±r ve mailleri g√∂nderir"""
    try:
        # 1. PDF'leri ≈üehirlere g√∂re gruplandƒ±r
        city_to_pdfs = {}
        for pdf_file in pdf_files:
            city_name = pdf_file['city_name']
            if city_name not in city_to_pdfs:
                city_to_pdfs[city_name] = []
            city_to_pdfs[city_name].append(pdf_file)
        
        # 2. Her ≈üehir i√ßin ilgili gruplarƒ± bul
        group_to_pdfs = {}
        email_results = []
        
        for city_name, pdf_list in city_to_pdfs.items():
            # ≈ûehir adƒ±nƒ± normalize et
            normalized_city = group_manager.normalize_city_name(city_name)
            
            # Bu ≈üehirle e≈üle≈üen gruplarƒ± bul
            group_ids = group_manager.get_groups_for_city(normalized_city)
            
            for group_id in group_ids:
                if group_id not in group_to_pdfs:
                    group_to_pdfs[group_id] = []
                
                # Bu gruba t√ºm PDF'leri ekle
                group_to_pdfs[group_id].extend(pdf_list)
        
        # 3. Her grup i√ßin PDF'leri birle≈ütir ve mail g√∂nder
        for group_id, pdf_list in group_to_pdfs.items():
            if not pdf_list:
                continue
                
            group_info = group_manager.get_group_info(group_id)
            recipients = group_info.get("email_recipients", [])
            
            if not recipients:
                logger.warning(f"Grup {group_id} i√ßin email alƒ±cƒ±sƒ± tanƒ±mlƒ± deƒüil")
                continue
            
            # PDF'leri ZIP yap
            zip_path = await create_pdf_zip(pdf_list, group_info)
            if not zip_path:
                continue
            
            # Mail g√∂nder
            subject = f"üìÑ {group_info.get('group_name', group_id)} - PDF Dosyalarƒ±"
            body = (
                f"Merhaba,\n\n"
                f"{group_info.get('group_name', group_id)} grubu i√ßin {len(pdf_list)} adet PDF dosyasƒ± ektedir.\n\n"
                f"ƒ∞yi √ßalƒ±≈ümalar,\nData_listesi_Hƒ±dƒ±r"
            )
            
            success = await send_email_with_attachment(
                recipients,
                subject,
                body,
                zip_path
            )
            
            # Sonu√ßlarƒ± kaydet
            for recipient in recipients:
                email_results.append({
                    "success": success,
                    "group_id": group_id,
                    "recipient": recipient,
                    "pdf_count": len(pdf_list),
                    "error": None if success else "Mail g√∂nderilemedi"
                })
            
            # Ge√ßici ZIP'i sil
            zip_path.unlink(missing_ok=True)
        
        # 4. Ge√ßici PDF dosyalarƒ±nƒ± temizle
        for pdf_file in pdf_files:
            try:
                pdf_file['path'].unlink(missing_ok=True)
            except:
                pass
        
        return {
            "success": True,
            "processed_pdfs": len(pdf_files),
            "groups_processed": len(group_to_pdfs),
            "email_results": email_results,
            "group_details": group_to_pdfs
        }
        
    except Exception as e:
        logger.error(f"PDF gruplama hatasƒ±: {e}")
        return {"success": False, "error": str(e)}

async def create_pdf_zip(pdf_files: List[Dict], group_info: Dict) -> Path:
    """PDF'leri ZIP dosyasƒ± olarak paketler"""
    try:
        # ZIP dosyasƒ± i√ßin isim olu≈ütur
        group_name = group_info.get("group_name", group_info.get("group_id", "pdfs"))
        zip_name = f"{group_name}_pdfs.zip"
        zip_path = Path(tempfile.gettempdir()) / zip_name
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for pdf_file in pdf_files:
                if pdf_file['path'].exists():
                    zipf.write(pdf_file['path'], pdf_file['filename'])
        
        return zip_path
        
    except Exception as e:
        logger.error(f"PDF ZIP olu≈üturma hatasƒ±: {e}")
        return None

def generate_pdf_report(result: Dict) -> str:
    """PDF i≈üleme raporu olu≈üturur"""
    if not result.get("success", False):
        return f"‚ùå PDF i≈üleme ba≈üarƒ±sƒ±z: {result.get('error', 'Bilinmeyen hata')}"
    
    processed_pdfs = result.get("processed_pdfs", 0)
    groups_processed = result.get("groups_processed", 0)
    email_results = result.get("email_results", [])
    
    successful_emails = sum(1 for res in email_results if res.get("success", False))
    failed_emails = len(email_results) - successful_emails
    
    report_lines = [
        "‚úÖ **PDF ƒ∞≈ûLEME RAPORU**",
        f"üìÑ ƒ∞≈ülenen PDF: {processed_pdfs}",
        f"üë• ƒ∞≈ülem yapƒ±lan grup: {groups_processed}",
        f"üìß Ba≈üarƒ±lƒ± mail: {successful_emails}",
        f"‚ùå Ba≈üarƒ±sƒ±z mail: {failed_emails}",
        "",
        "üìã **GRUP DETAYLARI:**"
    ]
    
    # Grup bazlƒ± detaylar
    group_details = result.get("group_details", {})
    for group_id, pdf_list in group_details.items():
        group_info = group_manager.get_group_info(group_id)
        group_name = group_info.get("group_name", group_id)
        report_lines.append(f"‚Ä¢ {group_name}: {len(pdf_list)} PDF")
    
    # Hata detaylarƒ±
    if failed_emails > 0:
        report_lines.extend([
            "",
            "‚ö†Ô∏è **HATALAR:**"
        ])
        for error in email_results[:3]:
            if not error.get("success", False):
                report_lines.append(f"‚Ä¢ {error.get('recipient', 'Bilinmeyen')}")
    
    return "\n".join(report_lines)